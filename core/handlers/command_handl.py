from aiogram import Router
from aiogram import Bot, Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from core.utils.bot_messages import bot_messages
from core.keyboards.inline import get_start_kb
from core.utils.fsm import BaseFSM
from core.keyboards import inline
from core.utils.database import db
from core.utils.fsm import Cmd_FSM
from core.handlers.course_handl import *

cmd_router = Router()

@cmd_router.message(Command("start"))
async def on_start(message: types.Message, state: FSMContext):
    await state.clear()
    if (not db.user_exists(message.from_user.id)):
        db.add_user(message.from_user.id)
    await message.answer(bot_messages["start1"])
    await message.answer(bot_messages["start2"])
    await message.answer(bot_messages["start3"])
    await message.answer(bot_messages["start4"], reply_markup=get_start_kb())



@cmd_router.message(Command("new"))
async def next_theme(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer(bot_messages["start4"], reply_markup=get_start_kb())

@cmd_router.message(Command("continue"))
async def next_theme(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(Cmd_FSM.NEXT_THEME)
    await message.answer("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º—É?", reply_markup=inline.continue_theme_kb())


@cmd_router.callback_query(Cmd_FSM.NEXT_THEME, F.data=="not_continue")
async def not_continue_lesson(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer(f"üí¨ –ù–µ—Ç")
    try:
        await callback.message.edit_reply_markup(reply_markup=None)
    except:
        print("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å –∫–Ω–æ–ø–∫–∏")
    await state.clear()

@cmd_router.message(Command("next_theme"))
async def next_theme(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(Cmd_FSM.NEXT_THEME)
    await message.answer(text="–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —Ç–µ–º—É?", reply_markup=inline.next_theme_kb())

@cmd_router.callback_query(Cmd_FSM.NEXT_THEME, F.data=="–ù–∞—á–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é")
async def to_next_theme(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    if db.get_course_status(db.get_latest_course(db.get_user_id(callback.from_user.id))) == "end":
        await callback.message.answer("–î–∞–Ω–Ω—ã–π –∫—É—Ä—Å –∫–æ–Ω—á–∏–ª—Å—è. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π, –ø–æ–ª—å–∑—É—è—Å—å –∫–æ–º–∞–Ω–¥–æ–π –≤ –º–µ–Ω—é.", reply_markup=inline.get_next_menu_kb())
        return
    day = db.get_day(callback.from_user.id) - 1
    if day < 20:
        db.update_day(db.get_latest_course(db.get_user_id(callback.from_user.id)), day+2)
        await callback.message.answer("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–∫!")
        await start_course(callback=callback, state=state)
    else:
        await callback.message.answer("–≠—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —Ç–µ–º–∞ –≤ –∫—É—Ä—Å–µ. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π –∫—É—Ä—Å –∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â—É—é —Ç–µ–º—É.")

@cmd_router.callback_query(Cmd_FSM.NEXT_THEME, F.data=="–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å —Ç–µ–∫—É—â—É—é")
async def continue_this(callback: types.CallbackQuery, state: FSMContext):
    await state.clear()
    if db.get_course_status(db.get_latest_course(db.get_user_id(callback.from_user.id))) == "end":
        await callback.message.answer("–î–∞–Ω–Ω—ã–π –∫—É—Ä—Å –∫–æ–Ω—á–∏–ª—Å—è. –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π, –ø–æ–ª—å–∑—É—è—Å—å –∫–æ–º–∞–Ω–¥–æ–π –≤ –º–µ–Ω—é.", reply_markup=inline.get_next_menu_kb())
        return
    day_status = db.get_day_status(callback.from_user.id)
    if day_status=="end":
        await callback.message.answer("–¢–µ–∫—É—â–∏–π —É—Ä–æ–∫ —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è. –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —É—Ä–æ–∫!")
        await start_course(callback=callback, state=state)
    else:
        await callback.message.answer("–ü—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ–∫—É—â—É—é —Ç–µ–º—É.")
        if  day_status== "started" or day_status=="lecture":
            await start_course(callback=callback, state=state)
        elif day_status=="frameworks":
            await framework_answer(callback=callback, state=state)
        elif day_status == "advices":
            await advices_answer(callback=callback, state=state)
        elif day_status == "exercises":
            await exercises(callback=callback, state=state)
        else:
            await callback.answer("–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫.")
# @cmd_router.message(Command("menu"))
# async def menu(message: types.Message, state: FSMContext):
#     await state.clear()
#     await state.set_state(BaseFSM.MENU)
#     await message.answer("–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º–∏ –∫—É—Ä—Å–∞–º–∏", reply_markup=inline.get_menu_kb())


@cmd_router.message(Command("about"))
async def about(message: types.Message, state: FSMContext):
    await state.clear()
    await state.set_state(BaseFSM.ABOUT)
    await message.answer(text="–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –æ–± –æ–±—É—á–µ–Ω–∏–∏", reply_markup=inline.get_about_kb())

@cmd_router.message(Command("support"))
async def support(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–∞—à–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏ –≤–æ–ø—Ä–æ—Å—ã –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å –≤ —Ç–µ–ª–µ–≥—Ä–∞–º–º @monoqle_support", reply_markup=inline.get_next_menu_kb())
